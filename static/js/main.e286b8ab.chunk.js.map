{"version":3,"sources":["Components/Home.js","Components/DashLine.js","Components/Bar.js","Components/Card.js","Components/About.js","Components/Portfolio.js","Components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Container","Image","src","roundedCircle","Component","DashLine","Bar","to","Button","variant","slides","id","url","process","Card","useState","index","set","transitions","useTransition","item","from","opacity","enter","leave","config","molasses","useEffect","setInterval","state","length","map","props","key","div","class","style","backgroundImage","About","Portolio","Contact","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e286b8ab.chunk.js","sourcesContent":["\nimport React, { Component } from \"react\";\nimport '../App.css';\n\nimport { Container, Image } from 'react-bootstrap';\n\n\nclass Home extends Component {\n  render() {\n    \n    return (\n      <div className=\"home\">\n        <div className='home-intro'>\n            <Container>\n                <Image className='home-photo' src='../images/photo_2inch.jpg' roundedCircle />\n            </Container>\n            <h3 className='home-name'>PinHo (Jimmy) Wang</h3>\n            <h4 className='home-brief'>\n                New Grad Software Engineer<br />\n                Love Full Stack Techniques\n            </h4>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","\nimport React, { Component } from \"react\";\nimport \"../App.css\";\n\nclass DashLine extends Component {\n  render() {\n    \n    return (\n      <div className=\"bar-dash\">\n      </div>\n    );\n  }\n}\n\nexport default DashLine;\n","\nimport React, { Component } from \"react\";\nimport \"../App.css\";\nimport DashLine from \"./DashLine\";\n\nimport { Link } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\n\nclass Bar extends Component {\n  render() {\n    \n    return (\n      <div className=\"bar\">\n        <div className='bar-main'>\n            <Link to='/'>\n                <h3 className='bar-title'>Jimmy Wang</h3>\n            </Link>\n            <Link to='/contact'>\n                <Button className='bar-item' variant=\"outline-info\">Contact</Button>\n            </Link>\n            <Link to='/portfolio'>\n                <Button className='bar-item' variant=\"outline-info\">Portfolio</Button>\n            </Link>\n            <Link to='/about'>\n                <Button className='bar-item' variant=\"outline-info\">About</Button>\n            </Link>\n            <Link to='/'>\n                <Button className='bar-item' variant=\"outline-info\">Home</Button>\n            </Link>\n        </div>\n        <DashLine />\n      </div>\n    );\n  }\n}\n\nexport default Bar;\n","import React, { useState, useEffect } from 'react'\nimport { useTransition, animated, config } from 'react-spring'\nimport './CardStyles.css'\n\nconst slides = [\n  { id: 0, url: process.env.PUBLIC_URL + '/images/IMG_1.jpg' },\n  { id: 1, url: process.env.PUBLIC_URL + '/images/IMG_2.jpg' },\n  { id: 2, url: process.env.PUBLIC_URL + '/images/IMG_3.jpg' },\n  { id: 3, url: process.env.PUBLIC_URL + '/images/IMG_4.jpg' },\n  { id: 4, url: process.env.PUBLIC_URL + '/images/IMG_5.jpg' },\n  { id: 5, url: process.env.PUBLIC_URL + '/images/IMG_6.jpg' },\n]\n\nconst Card = () => {\n  const [index, set] = useState(0)\n  const transitions = useTransition(slides[index], item => item.id, {\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 },\n    config: config.molasses,\n  })\n  useEffect(() => void setInterval(() => set(state => (state + 1) % slides.length), 5000), [])\n  return transitions.map(({ item, props, key }) => (\n    <animated.div\n      key={key}\n      class=\"cards-place\"\n    //   style={{ ...props, backgroundImage: `url(${item.url})` }}\n     style={{ ...props, backgroundImage: `url(${item.url})` }}\n    />\n  ))\n}\n\nexport default Card;\n","\nimport React, { Component } from \"react\";\nimport Card from \"./Card\";\n\nclass About extends Component {\n  render() {\n    \n    return (\n      <div className=\"about\">\n        <h1>About Page</h1>\n        <Card />\n      </div>\n    );\n  }\n}\n\nexport default About;\n","\nimport React, { Component } from \"react\";\n\n\nclass Portolio extends Component {\n  render() {\n    \n    return (\n      <div className=\"portolio\">\n        <h1>Portolio Page</h1>\n      </div>\n    );\n  }\n}\n\nexport default Portolio;\n","\nimport React, { Component } from \"react\";\n\n\nclass Contact extends Component {\n  render() {\n    \n    return (\n      <div className=\"contact\">\n        <h1>Contact Page</h1>\n      </div>\n    );\n  }\n}\n\nexport default Contact;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport { Route, Switch} from 'react-router-dom';\n\n\nimport Home from \"./Components/Home\";\nimport Bar from \"./Components/Bar\";\nimport About from \"./Components/About\";\nimport Portolio from \"./Components/Portfolio\";\nimport Contact from \"./Components/Contact\";\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"App\">\n          <Bar />\n          <div className='container-routes'>\n            <Switch>\n              <Route exact path={['/', '/personal-website']} render={() => <Home />} />\n              <Route exact path='/about' render={() => <About />} />\n              <Route exact path='/portfolio' render={() => <Portolio />} />\n              <Route exact path='/contact' render={() => <Contact />} />\n            </Switch>\n          </div>\n\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}